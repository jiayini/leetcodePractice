/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head != null) {
            ListNode p = head;
            ListNode q = head;
            int i = 0;
            if (p.next == null) {
                return null;
            }
            if (p.next.next == null) {
                if (n == 1) {
                    p.next = null;
                    return head;
                }
                if (n == 2) {
                   head = p.next;
                   return head;
                }
            }
            while (i < n) {
                if (q.next != null) {
                    q = q.next;
                    i ++;
                } else {
                   head = p.next;
                   return head;
                }
            }
            while (q.next != null) {
                p = p.next;
                q = q.next;
            }
            p.next = p.next.next;
            
        }
        return head;
    //      ListNode dummy = new ListNode(0);
    // dummy.next = head;
    // ListNode first = dummy;
    // ListNode second = dummy;
    // // Advances first pointer so that the gap between first and second is n nodes apart
    // for (int i = 1; i <= n + 1; i++) {
    //     first = first.next;
    // }
    // // Move first to the end, maintaining the gap
    // while (first != null) {
    //     first = first.next;
    //     second = second.next;
    // }
    // second.next = second.next.next;
    // return dummy.next;
    }
}
