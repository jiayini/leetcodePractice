/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        System.out.println(headA);
        System.out.println(headB);
        int len1 = 0, len2 = 0;
        ListNode p = headA, q = headB;
        while (p != null) {
            p = p.next;
            len1 ++;
        }
        while (q != null) {
            q = q.next;
            len2 ++;
        }
         p = headA; q = headB;
        if (len1 == len2) {
            while (q != p) {
                p = p.next;
                q = q.next;
            } return p;
        } else if (len1 > len2) {
            int h = 0;
            while (h < len1 - len2) {
                p = p.next;
                h++;
            }
             while (q != p) {
                p = p.next;
                q = q.next;
            } return p;
        } else {
             int h = 0;
            while (h < len2 - len1) {
                q = q.next;
                h++;
            }
             while (q != p) {
                p = p.next;
                q = q.next;
            } return p;
        }

    }
    // public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    //     HashMap map = new HashMap();
    //     ListNode p = headA, q = headB;
    //     while(p != null) {
    //         map.put(p, '1');
    //         p = p.next;
    //     }
    //     while (q != null && map.get(q) == null ) {
    //            q = q.next;
    //     }
    //     return q;
    // }
}
